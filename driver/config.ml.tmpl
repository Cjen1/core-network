open Mirage

let bridge_socket =
  let doc = Key.Arg.info ~doc:"bridge socket to connect to" ["path"] in
  Key.(create "socket_path" Arg.(opt string "/var/tmp/bridge" doc))

let device =
  let doc = Key.Arg.info ~doc:"interface to connect to the bridge" ["dev"] in
  Key.(create "device" Arg.(opt string "ethx" doc))

let ip_address =
  let doc = Key.Arg.info ~doc:"ip address of on the provide interface" ["intf"] in
  Key.(create "ip" Arg.(opt string "xxx.xxx.xxx.xxx" doc))


let net = netif "%%DEVICE%%"
let ethif = etif net
let arp = arp ethif
let ip =
  let config = {
    network = Ipaddr.V4.Prefix.of_address_string_exn "%%ADDRESS%%";
    gateway = None
  } in
  create_ipv4 ~config ethif arp


let main = foreign "Connector.Make" (network @-> ethernet @-> arpv4 @-> ipv4 @-> job)


let () =
  let keys = List.map Key.abstract [
    bridge_socket; device; ip_address
  ] in
  let packages = [
    package ~sublibs:["lwt"] "logs";
    package ~sublibs:["ipv4"; "ethif"] "tcpip";
  ] in
  register ~packages ~keys "connector" [main $ net $ ethif $ arp $ ip]

